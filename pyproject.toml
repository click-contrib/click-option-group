[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "click-option-group"
authors = [
    { name = "Eugene Prilepin", email = "esp.home@gmail.com" },
]
description = "Option groups missing in Click"
readme = "README.md"
license = 'BSD-3-Clause'
license-files = { paths = ['LICENSE'] }
requires-python = ">=3.6"
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Environment :: Console',
    'Topic :: Software Development :: Libraries',
    'License :: OSI Approved :: BSD License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.6',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]

dynamic = ["version"]

dependencies = [
    'Click>=7.0',
]

[project.optional-dependencies]
test = [
    "pytest",
]
test-cov = [
    "click-option-group[test]",
    'pytest-cov',
]
dev = [
    "click-option-group[test]",
    "pre-commit",
]
docs = [
    'sphinx',
    'Pallets-Sphinx-Themes',
    'm2r2',
]

[project.urls]
Homepage = "https://github.com/click-contrib/click-option-group"
Code = "https://github.com/click-contrib/click-option-group"
Documentation = "https://click-option-group.readthedocs.io"
Issues = "https://github.com/click-contrib/click-option-group/issues"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/click_option_group/_version.py"

[tool.ruff]
line-length = 120
select = [
    "E", "F", "W", # flake8
    "B",           # flake8-bugbear
    "I",           # isort
    "C4",          # flake8-comprehensions
    "EM",          # flake8-errmsg
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "TID251",      # flake8-tidy-imports.banned-api
    "T20",         # flake8-print
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
extend-ignore = [
    "PLR",     # Design rules for pylint
    "PLE1205", # Format check doesn't work with our custom logger
    "E501",    # Line too long
    "PT004",   # Incorrect, just usefixtures instead.
    "PT012",   # Block should contain a single simple statement
    "RUF009",  # Too easy to get a false positive
]
src = ["src"]
unfixable = ["T20", "F841"]
exclude = []

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_sort_within_sections = true
force_to_top = ["typing", "pytest"]
line_length = 120

[tool.yapf]
based_on_style = "pep8"
column_limit = 120
blank_line_before_module_docstring = true
coalesce_brackets = false
dedent_closing_brackets = true
split_arguments_when_comma_terminated = true
split_before_dict_set_generator = true
allow_split_before_dict_value = false

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage]
run.source = ["src"]
